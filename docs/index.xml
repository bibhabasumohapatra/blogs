<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Bibhabasu&#39;s Blogs</title>
<link>https://bibhabasumohapatra.github.io/</link>
<atom:link href="https://bibhabasumohapatra.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Blog page of Bibhabasu Mohapatra.</description>
<generator>quarto-1.6.33</generator>
<lastBuildDate>Mon, 15 Apr 2024 18:30:00 GMT</lastBuildDate>
<item>
  <title>Linear Regression from Scratch</title>
  <link>https://bibhabasumohapatra.github.io/posts/linear-regression-from-scratch.html</link>
  <description><![CDATA[ 




<section id="chapter-1" class="level1">
<h1>Chapter 1</h1>
<section id="example-polynomial-curve-fitting" class="level3">
<h3 class="anchored" data-anchor-id="example-polynomial-curve-fitting">1.1. Example: Polynomial Curve Fitting</h3>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-2">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sin(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x_train) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,x_train.shape,) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## added noise as per the book</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### testing data</span></span>
<span id="cb2-5">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb2-6">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sin(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x_test) </span></code></pre></div>
</div>
</section>
<section id="plot-training-data" class="level2">
<h2 class="anchored" data-anchor-id="plot-training-data">plot training data</h2>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-2">plt.scatter(x_train, y_train)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-04-16-linear-regression-from-scratch_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="fit-the-linear-model-on-training-data" class="level2">
<h2 class="anchored" data-anchor-id="fit-the-linear-model-on-training-data">Fit the Linear model on Training data</h2>
<p>To solve for the optimal weight matrix ( W ), given the expression ( (XW - Y)^T (XW - Y) ), we can proceed by first expanding the expression and then minimizing it with respect to ( W ).</p>
<section id="step-1-expand-the-expression" class="level3">
<h3 class="anchored" data-anchor-id="step-1-expand-the-expression">Step 1: Expand the expression</h3>
<p>Given: <img src="https://latex.codecogs.com/png.latex?%0AL(W)%20=%20(XW%20-%20Y)%5ET%20(XW%20-%20Y)%0A"></p>
<p>Expanding this: <img src="https://latex.codecogs.com/png.latex?%0AL(W)%20=%20(XW)%5ET(XW)%20-%20(XW)%5ET%20Y%20-%20Y%5ET%20(XW)%20+%20Y%5ET%20Y%0A"></p>
<p>Simplifying further: <img src="https://latex.codecogs.com/png.latex?%0AL(W)%20=%20W%5ET%20X%5ET%20XW%20-%20W%5ET%20X%5ET%20Y%20-%20Y%5ET%20XW%20+%20Y%5ET%20Y%0A"></p>
<p>Since ( W^T X^T Y ) and ( Y^T XW ) are scalars, they are equal. Therefore: <img src="https://latex.codecogs.com/png.latex?%0AL(W)%20=%20W%5ET%20X%5ET%20XW%20-%202W%5ET%20X%5ET%20Y%20+%20Y%5ET%20Y%0A"></p>
</section>
<section id="step-2-minimize-the-expression-with-respect-to-w" class="level3">
<h3 class="anchored" data-anchor-id="step-2-minimize-the-expression-with-respect-to-w">Step 2: Minimize the expression with respect to ( W )</h3>
<p>To find the optimal ( W ), take the derivative of ( L(W) ) with respect to ( W ) and set it to zero: <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20L(W)%7D%7B%5Cpartial%20W%7D%20=%202X%5ET%20XW%20-%202X%5ET%20Y%20=%200%0A"></p>
<p>Simplifying: <img src="https://latex.codecogs.com/png.latex?%0AX%5ET%20XW%20=%20X%5ET%20Y%0A"></p>
<p>Finally, solve for ( W ): <img src="https://latex.codecogs.com/png.latex?%0AW%20=%20(X%5ET%20X)%5E%7B-1%7D%20X%5ET%20Y%0A"></p>
</section>
<section id="final-answer" class="level3">
<h3 class="anchored" data-anchor-id="final-answer">Final Answer</h3>
<p>The optimal weight matrix ( W ) is given by: <img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7BW%20=%20(X%5ET%20X)%5E%7B-1%7D%20X%5ET%20Y%7D%0A"></p>
<p>This result is commonly known as the <strong>Normal Equation</strong> in linear regression.</p>
<div id="cell-9" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">powers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb4-2">x_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(powers) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## NxM</span></span>
<span id="cb4-3">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linalg.pinv(x_poly) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y_train.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## MxN * Nx1 == Mx1</span></span></code></pre></div>
</div>
<div id="cell-10" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">w.shape, x_test.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>(torch.Size([5, 1]), torch.Size([200]))</code></pre>
</div>
</div>
<div id="cell-11" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">x_poly_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test.unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(powers)</span>
<span id="cb7-2">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_poly_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> w</span></code></pre></div>
</div>
<div id="cell-12" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-2">plt.scatter(x_train, y_train, facecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"training data"</span>)</span>
<span id="cb8-3">plt.plot(x_test, y_test, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$\sin(2\pi x)$"</span>)</span>
<span id="cb8-4">plt.legend()</span>
<span id="cb8-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-04-16-linear-regression-from-scratch_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-13" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, degree <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]):</span>
<span id="cb9-2">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-3">    powers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(degree).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb9-4">    x_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(powers) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## NxM</span></span>
<span id="cb9-5">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linalg.pinv(x_poly) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y_train.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## MxN * Nx1 == Mx1</span></span>
<span id="cb9-6">    x_poly_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test.unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(powers)</span>
<span id="cb9-7">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_poly_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> w    </span>
<span id="cb9-8"></span>
<span id="cb9-9">    plt.scatter(x_train, y_train, facecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"training data"</span>)</span>
<span id="cb9-10">    plt.plot(x_test, y_test, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$\sin(2\pi x)$"</span>)</span>
<span id="cb9-11">    plt.plot(x_test, y_pred, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fitting"</span>)</span>
<span id="cb9-12">    plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb9-13">    plt.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(degree), xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-04-16-linear-regression-from-scratch_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="example-polynomial-curve-fitting-with-regularization" class="level2">
<h2 class="anchored" data-anchor-id="example-polynomial-curve-fitting-with-regularization">1.1. Example: Polynomial Curve Fitting with Regularization</h2>
<p>One technique that is often used to control the over-fitting phenomenon in such cases is that of regularization, which involves adding a penalty term to the error function in order to discourage the coefficients from reaching large values. The simplest such penalty term takes the form of a sum of squares of all of the coefficients, leading to a modified error function of the form.</p>
<p>Techniques such as this are known in the statistics literature as shrinkage methods because they reduce the value of the coefficients. The particular case of a quadratic regularizer is called ridge regression (Hoerl and Kennard, 1970). In the context of neural networks, this approach is known as weight decay</p>
<p>To solve for the optimal weight matrix ( W ) given the objective function ( (XW - Y)^T (XW - Y) + W^T W ), follow these steps:</p>
<section id="objective-function" class="level3">
<h3 class="anchored" data-anchor-id="objective-function">Objective Function</h3>
<p>The objective function is: <img src="https://latex.codecogs.com/png.latex?%0AL(W)%20=%20(XW%20-%20Y)%5ET%20(XW%20-%20Y)%20+%20W%5ET%20W%0A"></p>
</section>
<section id="step-1-expand-the-expression-1" class="level3">
<h3 class="anchored" data-anchor-id="step-1-expand-the-expression-1">Step 1: Expand the Expression</h3>
<p>Expanding ( (XW - Y)^T (XW - Y) ): <img src="https://latex.codecogs.com/png.latex?%0A(XW%20-%20Y)%5ET%20(XW%20-%20Y)%20=%20(XW)%5ET%20XW%20-%20(XW)%5ET%20Y%20-%20Y%5ET%20XW%20+%20Y%5ET%20Y%0A"></p>
<p>Since ( (XW)^T Y ) and ( Y^T XW ) are scalars and equal, this simplifies to: <img src="https://latex.codecogs.com/png.latex?%0A(XW%20-%20Y)%5ET%20(XW%20-%20Y)%20=%20W%5ET%20X%5ET%20XW%20-%202W%5ET%20X%5ET%20Y%20+%20Y%5ET%20Y%0A"></p>
<p>Adding ( W^T W ): <img src="https://latex.codecogs.com/png.latex?%0AL(W)%20=%20W%5ET%20X%5ET%20XW%20-%202W%5ET%20X%5ET%20Y%20+%20Y%5ET%20Y%20+%20W%5ET%20W%0A"></p>
<p>Combining like terms: <img src="https://latex.codecogs.com/png.latex?%0AL(W)%20=%20W%5ET%20(X%5ET%20X%20+%20I)%20W%20-%202W%5ET%20X%5ET%20Y%20+%20Y%5ET%20Y%0A"></p>
</section>
<section id="step-2-minimize-the-expression-with-respect-to-w-1" class="level3">
<h3 class="anchored" data-anchor-id="step-2-minimize-the-expression-with-respect-to-w-1">Step 2: Minimize the Expression with Respect to ( W )</h3>
<p>Take the derivative of ( L(W) ) with respect to ( W ) and set it to zero: <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20L(W)%7D%7B%5Cpartial%20W%7D%20=%202(X%5ET%20X%20+%20I)W%20-%202X%5ET%20Y%20=%200%0A"></p>
<p>Solving for ( W ): <img src="https://latex.codecogs.com/png.latex?%0A(X%5ET%20X%20+%20I)W%20=%20X%5ET%20Y%0A"> <img src="https://latex.codecogs.com/png.latex?%0AW%20=%20(X%5ET%20X%20+%20I)%5E%7B-1%7D%20X%5ET%20Y%0A"></p>
</section>
<section id="final-answer-1" class="level3">
<h3 class="anchored" data-anchor-id="final-answer-1">Final Answer</h3>
<p>The optimal weight matrix ( W ) is: <img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7BW%20=%20(X%5ET%20X%20+%20I)%5E%7B-1%7D%20X%5ET%20Y%7D%0A"></p>
<p>This result includes a regularization term ( W^T W ), which is common in <strong>Ridge Regression</strong> or <strong>Tikhonov Regularization</strong>.</p>
<div id="cell-16" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, degree <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]):</span>
<span id="cb10-2">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-3">    powers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(degree).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb10-4">    x_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(powers) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## NxM</span></span>
<span id="cb10-5">    N,M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_poly.shape</span>
<span id="cb10-6"></span>
<span id="cb10-7">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (torch.linalg.inv(x_poly.T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x_poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.eye(M))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x_poly.T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y_train.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## MxN * Nx1 == Mx1</span></span>
<span id="cb10-8">    x_poly_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test.unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(powers)</span>
<span id="cb10-9">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_poly_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> w    </span>
<span id="cb10-10"></span>
<span id="cb10-11">    plt.scatter(x_train, y_train, facecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"training data"</span>)</span>
<span id="cb10-12">    plt.plot(x_test, y_test, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$\sin(2\pi x)$"</span>)</span>
<span id="cb10-13">    plt.plot(x_test, y_pred, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fitting"</span>)</span>
<span id="cb10-14">    plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb10-15">    plt.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(degree), xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-04-16-linear-regression-from-scratch_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>
</section>

 ]]></description>
  <category>ML foundation</category>
  <category>bayesian</category>
  <category>PyTorch</category>
  <guid>https://bibhabasumohapatra.github.io/posts/linear-regression-from-scratch.html</guid>
  <pubDate>Mon, 15 Apr 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Visualize Salincy Maps in Timm Models (ViT) using PyTorch Hooks?</title>
  <link>https://bibhabasumohapatra.github.io/posts/visualizing-vision-transformers-timm.html</link>
  <description><![CDATA[ 




<div id="7fd97189" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:30.157544Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:30.157240Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:35.727608Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:35.726822Z&quot;}" data-papermill="{&quot;duration&quot;:5.5794,&quot;end_time&quot;:&quot;2024-03-29T09:22:35.729895&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:30.150495&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> albumentations <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> A</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div id="37b0a63a" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:35.742371Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:35.741924Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:35.746480Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:35.745579Z&quot;}" data-papermill="{&quot;duration&quot;:0.012844,&quot;end_time&quot;:&quot;2024-03-29T09:22:35.748579&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:35.735735&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/kaggle/input/image-net-visualization/bird_1.png"</span></span>
<span id="cb2-2">model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vit_small_patch16_224.dino"</span></span>
<span id="cb2-3">image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span></code></pre></div>
</div>
<div id="fd7a44dc" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:35.759818Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:35.759576Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:35.766101Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:35.765290Z&quot;}" data-papermill="{&quot;duration&quot;:0.014335,&quot;end_time&quot;:&quot;2024-03-29T09:22:35.768065&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:35.753730&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_image(im_path, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_size):</span>
<span id="cb3-2">    </span>
<span id="cb3-3">    </span>
<span id="cb3-4">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.imread(im_path)[:,:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## HXWXC</span></span>
<span id="cb3-5">    H,W,C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.shape</span>
<span id="cb3-6">    org_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.copy()</span>
<span id="cb3-7">    </span>
<span id="cb3-8">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A.Normalize()(image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>img)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## HxWxC</span></span>
<span id="cb3-9">    norm_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.copy()</span>
<span id="cb3-10">    </span>
<span id="cb3-11">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(img,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## CxHxW</span></span>
<span id="cb3-12">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.expand_dims(img,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## B=1,CxHxW</span></span>
<span id="cb3-13">    </span>
<span id="cb3-14">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(img)</span>
<span id="cb3-15">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Upsample((shape,shape),mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bilinear'</span>)(img)</span>
<span id="cb3-16">    </span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> img, norm_img, org_img</span></code></pre></div>
</div>
<div id="63ed4542" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:35.781062Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:35.780809Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:35.887801Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:35.886815Z&quot;}" data-papermill="{&quot;duration&quot;:0.116763,&quot;end_time&quot;:&quot;2024-03-29T09:22:35.890142&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:35.773379&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">img,norm_img,org_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image(img_path)</span></code></pre></div>
</div>
<div id="75fa5ade" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:35.902613Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:35.901735Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:36.357591Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:36.356598Z&quot;}" data-papermill="{&quot;duration&quot;:0.466759,&quot;end_time&quot;:&quot;2024-03-29T09:22:36.362261&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:35.895502&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">io.imshow(org_img)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-03-29-visualizing-vision-transformers-timm_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="5ed73cca" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:36.380946Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:36.380610Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:37.006299Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:37.005319Z&quot;}" data-papermill="{&quot;duration&quot;:0.638563,&quot;end_time&quot;:&quot;2024-03-29T09:22:37.009466&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:36.370903&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">io.imshow(norm_img)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-03-29-visualizing-vision-transformers-timm_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="d9318370" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:37.030247Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:37.029521Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:50.210573Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:50.209232Z&quot;}" data-papermill="{&quot;duration&quot;:13.194169,&quot;end_time&quot;:&quot;2024-03-29T09:22:50.213234&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:37.019065&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>capture</span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> pip install timm</span></code></pre></div>
</div>
<div id="a984c977" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:50.234271Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:50.233927Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:57.831466Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:57.830408Z&quot;}" data-papermill="{&quot;duration&quot;:7.610568,&quot;end_time&quot;:&quot;2024-03-29T09:22:57.833780&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:50.223212&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timm</span>
<span id="cb8-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timm.create_model(model_path,pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-3">                         img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_size,</span>
<span id="cb8-4">                         dynamic_img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"86459c6a704641e6b0998effcfe2b269","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="5484ad02" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:57.855069Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:57.854760Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:58.089364Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:58.088170Z&quot;}" data-papermill="{&quot;duration&quot;:0.247969,&quot;end_time&quot;:&quot;2024-03-29T09:22:58.091676&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:57.843707&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.cuda()</span></code></pre></div>
</div>
<div id="4c338db0" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:58.112776Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:58.112482Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:58.117258Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:58.116373Z&quot;}" data-papermill="{&quot;duration&quot;:0.017603,&quot;end_time&quot;:&quot;2024-03-29T09:22:58.119163&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:58.101560&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_outputs(name:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb10-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hook(model, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output):</span>
<span id="cb10-4">        outputs[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.detach()</span>
<span id="cb10-5">        </span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> hook</span></code></pre></div>
</div>
<div id="6bcbc544" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:58.139954Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:58.139703Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:58.994087Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:58.993194Z&quot;}" data-papermill="{&quot;duration&quot;:0.867738,&quot;end_time&quot;:&quot;2024-03-29T09:22:58.996412&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:58.128674&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">model.blocks[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].attn.q_norm.register_forward_hook(get_outputs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Q'</span>))</span>
<span id="cb11-2">model.blocks[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].attn.k_norm.register_forward_hook(get_outputs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'K'</span>))</span>
<span id="cb11-3">model.blocks[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].register_forward_hook(get_outputs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'features'</span>))</span>
<span id="cb11-4"></span>
<span id="cb11-5">model(img.cuda())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>tensor([[-1.6873e+00,  3.3118e+00,  1.6206e-02,  7.5276e+00, -3.8783e+00,
          7.9405e-01, -2.5275e-01, -9.2937e-01, -7.6219e+00,  1.8461e+00,
         -3.7896e+00,  6.9062e+00,  4.9580e+00,  7.0582e+00, -1.4598e+00,
          1.8604e+00,  3.1002e+00, -2.3646e-01,  9.7898e-01,  1.4716e-01,
          4.8010e+00,  9.8696e+00, -6.2256e+00, -4.0314e+00,  4.8572e-01,
          4.6386e+00,  5.2622e+00,  8.2102e+00,  6.6765e+00, -1.0041e+01,
          9.1688e-01,  2.6036e+00,  1.0652e+00, -1.0549e+01, -1.5771e+00,
         -2.4766e+00, -4.6636e+00,  5.6768e+00, -1.7559e+00, -4.9503e-01,
         -2.5628e+00,  1.0277e+01, -4.6592e+00, -3.6269e+00,  6.4073e+00,
         -2.8656e+00, -8.2731e+00,  9.1952e+00, -2.4074e+00, -5.6380e-01,
         -3.4731e+00, -4.7151e+00,  1.8822e-01, -3.8197e+00,  2.5455e+00,
         -1.3325e-01, -4.3335e+00,  7.5765e+00, -3.5712e+00, -4.4365e+00,
          4.9343e-01,  9.1502e-01,  1.0584e+01,  3.9611e+00,  3.8866e+00,
         -4.6030e+00,  1.4714e+00,  4.2984e-01, -3.4557e+00,  1.0801e+00,
         -4.1478e+00,  5.2226e+00,  2.8259e+00,  9.7525e-01,  6.9041e+00,
          1.2095e-01,  2.4013e+00,  1.6391e+00, -6.0108e+00, -9.3346e+00,
         -4.0121e+00,  1.8157e+00, -7.2864e-01,  8.5839e+00, -1.0082e+01,
          1.2923e+00, -1.8654e+00, -1.0347e+01,  4.6857e+00, -2.7471e+00,
          3.4723e+00,  4.6032e+00, -2.5349e+00, -2.0960e+00,  1.6807e-01,
          1.9170e+00, -6.1443e+00,  1.0321e+00, -1.6014e+00,  5.8918e+00,
          9.2721e+00, -1.2786e+00, -6.3613e+00,  5.5546e+00, -1.2483e+01,
          3.0828e+00, -6.0050e-02, -1.3473e+01,  6.6318e-01, -5.3011e+00,
         -3.5312e+00, -1.5129e+00,  4.1372e+00,  1.4356e+00,  1.0351e+01,
         -1.7940e+00, -1.2211e+01,  2.8142e+00, -1.5071e+00, -6.9505e-01,
         -3.1786e+00,  7.8665e+00,  6.7557e-01,  2.6826e+00, -2.4210e+00,
         -2.8962e+00,  5.5639e+00, -1.8775e+00, -1.2859e+01, -7.5849e-01,
          1.6650e+00,  2.6447e+00, -6.3936e-01,  1.5060e+00,  6.0126e-01,
          3.9601e+00, -1.8724e+00, -3.1135e+00, -2.8265e+00,  1.6418e+00,
         -5.6146e+00, -9.4629e-02, -1.3282e-01,  7.6737e+00, -1.5090e+00,
          5.6526e+00, -9.7128e-01, -3.6167e+00,  1.7872e+00, -2.7470e+00,
         -2.4107e+00, -7.7301e-03,  5.4260e+00, -2.6830e-01, -6.0379e-01,
          2.4405e+00, -3.0422e+00, -6.1176e+00, -1.3285e+00, -1.1136e+01,
         -3.1303e+00,  2.8008e+00,  2.7368e+00, -2.8170e+00, -4.1028e+00,
          5.4076e+00,  1.6082e+00, -9.9726e-01,  5.4990e+00,  1.8774e+00,
         -5.4387e-01, -2.9433e-01,  3.6973e+00, -4.5119e+00, -3.5505e+00,
          2.8779e+00,  3.0147e-01, -2.3486e+00, -1.5237e+00,  1.1389e+00,
          2.2250e+00,  6.8706e+00,  3.7546e+00, -1.6722e+00, -6.4871e-01,
          3.2394e+00,  6.6144e-01,  1.0893e+00,  1.1054e+00,  4.0759e+00,
         -4.9504e+00, -4.0154e+00, -1.4490e+00,  1.8689e+00, -3.9057e+00,
          2.2533e+00, -6.3996e+00, -5.5835e-01,  2.4417e+00,  2.1308e+00,
          3.9925e+00,  4.4550e-01,  1.1531e+00,  4.7416e+00,  2.0096e+00,
         -1.2605e+00, -9.5855e-01, -5.2844e+00, -4.0194e+00,  7.0700e-01,
          5.4294e+00,  3.3919e+00,  4.9089e+00,  4.1371e-01,  2.2920e+00,
         -1.7367e-01, -4.7534e+00,  5.0581e+00,  8.1151e+00, -1.5215e+00,
          3.7808e+00, -2.9530e+00, -9.3015e+00,  6.1947e-01, -3.9256e-01,
         -4.1782e+00,  1.9628e+00,  6.7975e+00,  1.2619e+00,  1.7882e+00,
         -9.8904e-01, -3.4642e-01, -2.1700e+00,  8.9316e+00,  4.0332e+00,
         -3.3242e+00,  3.7758e+00,  2.3272e+00, -2.6639e+00,  1.8211e+00,
          2.0843e+00,  9.2511e+00,  7.0950e-01,  2.3567e+00, -3.4504e+00,
         -1.2123e+01, -2.2370e-01, -4.0639e+00, -7.6606e-01, -5.7467e-01,
          6.2722e+00, -1.1846e+00,  7.4569e-01, -2.3022e+00, -7.6787e+00,
          1.5879e+00, -5.4248e+00,  4.4352e+00, -3.0992e-01, -9.8239e+00,
          4.7596e+00, -7.8933e+00, -1.5991e+00,  3.5556e+00, -8.2829e+00,
         -2.8837e+00,  8.0843e+00,  4.4499e+00, -7.8938e+00,  1.1607e+01,
          3.3790e+00, -1.0773e+01,  4.5276e+00,  2.0844e+00,  2.4876e+00,
          2.4884e+00,  2.1223e-01, -3.0398e+00, -6.3939e+00, -2.2402e+00,
         -9.1261e-01,  2.2716e+00,  7.5233e+00,  3.2600e+00,  1.3579e+00,
          3.0965e+00, -1.2645e+00,  3.8311e-01, -3.8111e+00, -1.9618e+00,
          2.7574e+00,  1.0933e+01, -8.1753e+00, -5.7976e-01,  4.3519e+00,
         -3.1721e+00,  3.5473e+00,  8.9204e-01, -5.8862e+00,  5.9441e+00,
         -4.1584e+00,  2.6372e+00,  5.9613e-01, -3.5491e+00, -7.7043e+00,
         -5.9683e+00, -1.9161e-01, -3.4110e+00, -4.9706e+00,  3.6422e+00,
          2.0380e+00, -1.7211e-01,  2.2398e+00, -8.1027e-01, -1.7448e+00,
         -8.5672e-01, -3.8151e-02, -1.5993e+00,  3.6409e+00,  3.0737e+00,
          1.5809e-01, -2.5176e-01,  3.4933e+00, -6.0633e+00,  6.0766e+00,
          6.8786e+00, -2.1457e+00,  4.7027e-01, -5.3296e-01, -9.8374e+00,
         -4.7503e+00, -1.6798e+01,  5.6179e+00,  1.0797e+00,  9.5722e-01,
          1.0259e+01,  2.4940e+00,  5.1237e+00, -3.9690e+00,  6.3755e+00,
         -2.4782e+00,  5.0692e+00,  1.1048e+00, -3.4466e+00, -8.6174e+00,
         -1.3207e+00, -1.0411e+01, -1.8757e+00, -1.1057e+01, -5.9575e+00,
          1.0189e+00,  2.0985e+00, -3.2184e+00, -3.6003e+00, -4.3049e+00,
          3.8259e+00, -4.0951e+00, -1.8868e+00, -4.7576e+00, -6.7396e+00,
          6.9816e-01, -2.2439e+00, -4.5493e+00,  8.9310e+00, -1.6068e-01,
         -2.5645e+00,  7.0637e+00,  1.7403e+01,  2.9385e+00,  1.5559e+00,
          5.3462e+00,  1.3728e+01,  3.9456e+00, -5.9510e+00,  3.1551e+00,
          4.6709e+00, -3.6971e+00, -1.2921e+00,  2.9455e+00,  4.7313e+00,
         -2.5174e+00,  6.0789e+00, -7.3726e+00, -2.1013e+00]], device='cuda:0',
       grad_fn=&lt;SelectBackward0&gt;)</code></pre>
</div>
</div>
<div id="669483db" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:59.018052Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:59.017487Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:59.021952Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:59.021057Z&quot;}" data-papermill="{&quot;duration&quot;:0.01741,&quot;end_time&quot;:&quot;2024-03-29T09:22:59.023838&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:59.006428&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.blocks[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].attn.scale</span></code></pre></div>
</div>
<div id="b03ba79d" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:59.044743Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:59.044483Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:59.054758Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:59.053976Z&quot;}" data-papermill="{&quot;duration&quot;:0.022998,&quot;end_time&quot;:&quot;2024-03-29T09:22:59.056709&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:59.033711&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">outputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attention"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (outputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> outputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"K"</span>].transpose(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#*scale</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># outputs["attention"] = outputs["attention"].softmax(dim=-1)</span></span></code></pre></div>
</div>
<div id="7dd5bd1c" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:59.078104Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:59.077846Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:22:59.083521Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:22:59.082600Z&quot;}" data-papermill="{&quot;duration&quot;:0.018345,&quot;end_time&quot;:&quot;2024-03-29T09:22:59.085504&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:59.067159&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="14">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">outputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attention"</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>torch.Size([1, 6, 4097, 4097])</code></pre>
</div>
</div>
<div id="592a4541" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:22:59.107304Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:22:59.106789Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:23:01.599908Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:23:01.598809Z&quot;}" data-papermill="{&quot;duration&quot;:2.506291,&quot;end_time&quot;:&quot;2024-03-29T09:23:01.601979&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:22:59.095688&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">b,num_heads,num_patches_1,num_patches_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attention"</span>].shape</span>
<span id="cb17-2">map_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.sqrt(num_patches_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> attention_head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_heads):</span>
<span id="cb17-4">    attention_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attention"</span>][:,attention_head,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 1,4096</span></span>
<span id="cb17-5">    attention_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attention_map.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,map_size,map_size)</span>
<span id="cb17-6">    </span>
<span id="cb17-7">    attention_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Upsample(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(image_size,image_size))(attention_map)</span>
<span id="cb17-8">    </span>
<span id="cb17-9">    attention_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attention_map[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:].detach().cpu().numpy()</span>
<span id="cb17-10">    </span>
<span id="cb17-11">    io.imshow(attention_map)</span>
<span id="cb17-12">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-03-29-visualizing-vision-transformers-timm_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-03-29-visualizing-vision-transformers-timm_files/figure-html/cell-16-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-03-29-visualizing-vision-transformers-timm_files/figure-html/cell-16-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-03-29-visualizing-vision-transformers-timm_files/figure-html/cell-16-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-03-29-visualizing-vision-transformers-timm_files/figure-html/cell-16-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-03-29-visualizing-vision-transformers-timm_files/figure-html/cell-16-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="dbd5c14c" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:23:01.629803Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:23:01.629489Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:23:01.635149Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:23:01.634258Z&quot;}" data-papermill="{&quot;duration&quot;:0.02149,&quot;end_time&quot;:&quot;2024-03-29T09:23:01.637149&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:23:01.615659&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="16">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">outputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"features"</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>torch.Size([1, 4097, 384])</code></pre>
</div>
</div>
<div id="a7b67230" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-03-29T09:23:01.664998Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-03-29T09:23:01.664714Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-03-29T09:23:02.074323Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-03-29T09:23:02.073320Z&quot;}" data-papermill="{&quot;duration&quot;:0.426004,&quot;end_time&quot;:&quot;2024-03-29T09:23:02.076429&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2024-03-29T09:23:01.650425&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"features"</span>].mean(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-2">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb20-3"></span>
<span id="cb20-4">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,map_size,map_size)</span>
<span id="cb20-5"></span>
<span id="cb20-6">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Upsample(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(image_size,image_size))(features)</span>
<span id="cb20-7"></span>
<span id="cb20-8">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:].detach().cpu().numpy()</span>
<span id="cb20-9"></span>
<span id="cb20-10">io.imshow(features)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/skimage/io/_plugins/matplotlib_plugin.py:149: UserWarning: Low image data range; displaying image with stretched contrast.
  lo, hi, cmap = _get_display_range(image)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2024-03-29-visualizing-vision-transformers-timm_files/figure-html/cell-18-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>Vision Transformer</category>
  <category>Deep Learning</category>
  <category>PyTorch</category>
  <category>Timm</category>
  <guid>https://bibhabasumohapatra.github.io/posts/visualizing-vision-transformers-timm.html</guid>
  <pubDate>Thu, 28 Mar 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Understanding how EMA works?</title>
  <link>https://bibhabasumohapatra.github.io/posts/understanding-how-ema-works.html</link>
  <description><![CDATA[ 




<section id="exponential-moving-average-ema-in-weight-updates" class="level2">
<h2 class="anchored" data-anchor-id="exponential-moving-average-ema-in-weight-updates">Exponential Moving Average (EMA) in Weight Updates</h2>
<p>EMA (Exponential Moving Average) is an incredibly useful concept that finds application in various scenarios:</p>
<ul>
<li><p><strong>Weight Updates</strong>: EMA is used for updating model weights while retaining a historical record of previous weights. This enables the model to blend new information with past knowledge effectively.</p></li>
<li><p><strong>Self-Supervised Learning</strong>: EMA is commonly employed in Self-Supervised Learning setups. The weights obtained from Self-Supervised Learning are often utilized for downstream tasks like classification and segmentation.</p></li>
</ul>
<section id="clarification-on-emas-impact" class="level3">
<h3 class="anchored" data-anchor-id="clarification-on-emas-impact">Clarification on EMA’s Impact</h3>
<p>Initially, there was a misconception that the EMA process directly impacts the ongoing training of model weights. However, this is not the case. In reality, the EMA process involves the creation of a duplicated set of weights. These duplicate weights are updated alongside the primary training process, and the updated weights are subsequently leveraged for validation purposes. As a result, the overall training procedure remains unaffected by the EMA process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2023-08-14-understanding-how-ema-works_files/figure-html/4c7cd254-1-5d710aa5-97fa-4545-abeb-3f2102a18726.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<p>::: {#36edc225 .cell _cell_guid=‘b1076dfc-b9ad-4769-8c92-a6c4dae69d19’ _uuid=‘8f2839f25d086af736a60e9eeb907d3b93b6e0e5’ execution=‘{“iopub.execute_input”:“2023-08-14T15:14:27.136587Z”,“iopub.status.busy”:“2023-08-14T15:14:27.136194Z”,“iopub.status.idle”:“2023-08-14T15:14:30.874853Z”,“shell.execute_reply”:“2023-08-14T15:14:30.873447Z”}’ papermill=‘{“duration”:3.746175,“end_time”:“2023-08-14T15:14:30.877588”,“exception”:false,“start_time”:“2023-08-14T15:14:27.131413”,“status”:“completed”}’ tags=‘[]’ execution_count=1}</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> copy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deepcopy</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Model(nn.Module):</span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,):</span>
<span id="cb1-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-8"></span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,x):</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layer(x)</span>
<span id="cb1-13">    </span>
<span id="cb1-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>()</span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init_weights_1(m):</span>
<span id="cb1-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(m)</span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(m) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nn.Linear:</span>
<span id="cb1-18">        m.weight.fill_(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb1-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(m.weight)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>()</span>
<span id="cb1-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init_weights_2(m):</span>
<span id="cb1-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(m)</span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(m) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nn.Linear:</span>
<span id="cb1-25">        m.weight.fill_(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)</span>
<span id="cb1-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(m.weight)</span></code></pre></div>
<p>:::</p>
<div id="a8892788" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-08-14T15:14:30.886828Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-08-14T15:14:30.886198Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-08-14T15:14:30.999982Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-08-14T15:14:30.998761Z&quot;}" data-papermill="{&quot;duration&quot;:0.121662,&quot;end_time&quot;:&quot;2023-08-14T15:14:31.003024&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-08-14T15:14:30.881362&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">teacher <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights_1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## TO BE UPDATED</span></span>
<span id="cb2-2">student <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(init_weights_2) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## From Training</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Linear(in_features=3, out_features=3, bias=False)
Parameter containing:
tensor([[1., 1., 1.],
        [1., 1., 1.],
        [1., 1., 1.]], requires_grad=True)
Model(
  (layer): Linear(in_features=3, out_features=3, bias=False)
)
Linear(in_features=3, out_features=3, bias=False)
Parameter containing:
tensor([[2., 2., 2.],
        [2., 2., 2.],
        [2., 2., 2.]], requires_grad=True)
Model(
  (layer): Linear(in_features=3, out_features=3, bias=False)
)</code></pre>
</div>
</div>
<div id="45066a11" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-08-14T15:14:31.012591Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-08-14T15:14:31.012166Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-08-14T15:14:31.019071Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-08-14T15:14:31.018176Z&quot;}" data-papermill="{&quot;duration&quot;:0.014386,&quot;end_time&quot;:&quot;2023-08-14T15:14:31.021255&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-08-14T15:14:31.006869&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>()</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ema_model(teacher_model, student_model,decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>):</span>
<span id="cb4-3">    teacher_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> teacher_wt,student_wt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(teacher_model.state_dict().values(),student_model.state_dict().values()):</span>
<span id="cb4-6">        teacher_wt.copy_(teacher_wt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>decay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> student_wt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>decay))</span></code></pre></div>
</div>
<div id="a11e1661" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-08-14T15:14:31.031324Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-08-14T15:14:31.030527Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-08-14T15:14:31.040022Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-08-14T15:14:31.039186Z&quot;}" data-papermill="{&quot;duration&quot;:0.017168,&quot;end_time&quot;:&quot;2023-08-14T15:14:31.042463&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-08-14T15:14:31.025295&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ema_model(teacher,student)</span></code></pre></div>
</div>
<div id="2115ad1a" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-08-14T15:14:31.052055Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-08-14T15:14:31.051317Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-08-14T15:14:31.060576Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-08-14T15:14:31.059445Z&quot;}" data-papermill="{&quot;duration&quot;:0.017,&quot;end_time&quot;:&quot;2023-08-14T15:14:31.063255&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-08-14T15:14:31.046255&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">teacher.state_dict()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>OrderedDict([('layer.weight',
              tensor([[1.5000, 1.5000, 1.5000],
                      [1.5000, 1.5000, 1.5000],
                      [1.5000, 1.5000, 1.5000]]))])</code></pre>
</div>
</div>
<div id="9c42fca9" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-08-14T15:14:31.073259Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-08-14T15:14:31.072576Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-08-14T15:14:31.080418Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-08-14T15:14:31.079313Z&quot;}" data-papermill="{&quot;duration&quot;:0.015332,&quot;end_time&quot;:&quot;2023-08-14T15:14:31.082580&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-08-14T15:14:31.067248&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">student.state_dict()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>OrderedDict([('layer.weight',
              tensor([[2., 2., 2.],
                      [2., 2., 2.],
                      [2., 2., 2.]]))])</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>tools</category>
  <category>deep learning</category>
  <category>PyTorch</category>
  <guid>https://bibhabasumohapatra.github.io/posts/understanding-how-ema-works.html</guid>
  <pubDate>Sun, 13 Aug 2023 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Integrating Deep Supervision in Segmentation Models Pytorch (smp)?</title>
  <link>https://bibhabasumohapatra.github.io/posts/deep-supervised-in-segmentation-models-pytorch.html</link>
  <description><![CDATA[ 




<section id="in-this-notebook---i-share-my-understanding-and-my-work-related-to-deep-supervision-in-models-and-loss-function-i-feel-deep-supervision-is-sometimes-useful-in-the-cases-where-the-segmentation-part-bit-hard-to-get-detected." class="level1">
<h1>In this Notebook - I share my understanding and my Work related to Deep Supervision in Models and Loss Function, I feel Deep Supervision is Sometimes Useful in the cases where the segmentation part bit hard to get detected.</h1>
<section id="with-my-own-understanding-and-thinking-i-try-to-implement-deep-supervision." class="level4">
<h4 class="anchored" data-anchor-id="with-my-own-understanding-and-thinking-i-try-to-implement-deep-supervision.">With my own understanding and thinking I try to implement Deep Supervision.</h4>
</section>
<section id="as-it-is-conversion-of-smps-unet-code-to-deep-supervision.-.-.-i-might-have-made-mistakes-or-maybe-all-of-my-work-is-a-mess-or-may-be-its-evolutionary-for-kaggle--let-me-know-in-the-comments." class="level4">
<h4 class="anchored" data-anchor-id="as-it-is-conversion-of-smps-unet-code-to-deep-supervision.-.-.-i-might-have-made-mistakes-or-maybe-all-of-my-work-is-a-mess-or-may-be-its-evolutionary-for-kaggle--let-me-know-in-the-comments.">As it is conversion of SMP’s Unet Code to Deep Supervision. . . I might have made mistakes, or maybe all of my work is a mess or may be its Evolutionary for Kaggle- Let me know in the comments.</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bibhabasumohapatra.github.io/posts/2023-03-31-deep-supervised-in-segmentation-models-pytorch_files/figure-html/cell-1-1-860671cf-0b26-4dd9-be23-11b8b217888f.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<p>::: {#cell-2 .cell _cell_guid=‘b1076dfc-b9ad-4769-8c92-a6c4dae69d19’ _uuid=‘8f2839f25d086af736a60e9eeb907d3b93b6e0e5’ execution=‘{“iopub.execute_input”:“2023-03-31T15:18:34.645310Z”,“iopub.status.busy”:“2023-03-31T15:18:34.645013Z”,“iopub.status.idle”:“2023-03-31T15:19:08.473332Z”,“shell.execute_reply”:“2023-03-31T15:19:08.471964Z”,“shell.execute_reply.started”:“2023-03-31T15:18:34.645281Z”}’ trusted=‘true’ execution_count=1}</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>capture</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install git<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>qubvel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>segmentation_models.pytorch</span></code></pre></div>
<p>:::</p>
</section>
<section id="here-directly-copied-the-decoder-code-of-segmentation-model-pytorch-unet.-and-in-the-class-unetdecoder-i-simply-also-appended-the-outputs-in-the-decoder-and-passed-it-also-through-different-segmentation-heads-according-to-their-channels." class="level2">
<h2 class="anchored" data-anchor-id="here-directly-copied-the-decoder-code-of-segmentation-model-pytorch-unet.-and-in-the-class-unetdecoder-i-simply-also-appended-the-outputs-in-the-decoder-and-passed-it-also-through-different-segmentation-heads-according-to-their-channels.">Here directly copied the Decoder code of Segmentation Model PyTorch Unet. And in the class UnetDecoder I simply also appended the outputs in the Decoder and Passed it also through different Segmentation heads according to their Channels.</h2>
<section id="my-output-basically-goes-from-larger-image-prediction-to-smaller-outputs-of-unet." class="level3">
<h3 class="anchored" data-anchor-id="my-output-basically-goes-from-larger-image-prediction-to-smaller-outputs-of-unet.">My Output basically goes from Larger Image (prediction) to smaller outputs of unet.</h3>
<p>example :</p>
<ul>
<li>torch.Size([1, 1, 384, 384])</li>
<li>torch.Size([1, 1, 192, 192])</li>
<li>torch.Size([1, 1, 96, 96])</li>
<li>torch.Size([1, 1, 48, 48])</li>
<li>torch.Size([1, 1, 24, 24])</li>
</ul>
<div id="cell-4" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-03-31T16:07:05.431452Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-03-31T16:07:05.430932Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-03-31T16:07:05.700181Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-03-31T16:07:05.698978Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-03-31T16:07:05.431416Z&quot;}" data-trusted="true" data-execution_count="25">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> segmentation_models_pytorch.base <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> modules <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> md</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> segmentation_models_pytorch.encoders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_encoder</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> segmentation_models_pytorch.base <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb2-8">    SegmentationModel,</span>
<span id="cb2-9">    SegmentationHead,</span>
<span id="cb2-10">    </span>
<span id="cb2-11">)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> segmentation_models_pytorch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> smp</span>
<span id="cb2-14"></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DecoderBlock(nn.Module):</span>
<span id="cb2-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb2-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb2-19">        in_channels,</span>
<span id="cb2-20">        skip_channels,</span>
<span id="cb2-21">        out_channels,</span>
<span id="cb2-22">        use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb2-23">        attention_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-24">    ):</span>
<span id="cb2-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> md.Conv2dReLU(</span>
<span id="cb2-27">            in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> skip_channels,</span>
<span id="cb2-28">            out_channels,</span>
<span id="cb2-29">            kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb2-30">            padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-31">            use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>use_batchnorm,</span>
<span id="cb2-32">        )</span>
<span id="cb2-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attention1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> md.Attention(attention_type, in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> skip_channels)</span>
<span id="cb2-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> md.Conv2dReLU(</span>
<span id="cb2-35">            out_channels,</span>
<span id="cb2-36">            out_channels,</span>
<span id="cb2-37">            kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb2-38">            padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-39">            use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>use_batchnorm,</span>
<span id="cb2-40">        )</span>
<span id="cb2-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attention2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> md.Attention(attention_type, in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>out_channels)</span>
<span id="cb2-42"></span>
<span id="cb2-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, skip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-44">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.interpolate(x, scale_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nearest"</span>)</span>
<span id="cb2-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> skip <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-46">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([x, skip], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-47">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attention1(x)</span>
<span id="cb2-48">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(x)</span>
<span id="cb2-49">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(x)</span>
<span id="cb2-50">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attention2(x)</span>
<span id="cb2-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span>
<span id="cb2-52"></span>
<span id="cb2-53"></span>
<span id="cb2-54"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CenterBlock(nn.Sequential):</span>
<span id="cb2-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, in_channels, out_channels, use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb2-56">        conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> md.Conv2dReLU(</span>
<span id="cb2-57">            in_channels,</span>
<span id="cb2-58">            out_channels,</span>
<span id="cb2-59">            kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb2-60">            padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-61">            use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>use_batchnorm,</span>
<span id="cb2-62">        )</span>
<span id="cb2-63">        conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> md.Conv2dReLU(</span>
<span id="cb2-64">            out_channels,</span>
<span id="cb2-65">            out_channels,</span>
<span id="cb2-66">            kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb2-67">            padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-68">            use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>use_batchnorm,</span>
<span id="cb2-69">        )</span>
<span id="cb2-70">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(conv1, conv2)</span>
<span id="cb2-71"></span>
<span id="cb2-72"></span>
<span id="cb2-73"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> UnetDecoder(nn.Module):</span>
<span id="cb2-74">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb2-75">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb2-76">        encoder_channels,</span>
<span id="cb2-77">        decoder_channels,</span>
<span id="cb2-78">        n_blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb2-79">        use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb2-80">        attention_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-81">        center<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb2-82">    ):</span>
<span id="cb2-83">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-84"></span>
<span id="cb2-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(decoder_channels):</span>
<span id="cb2-86">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(</span>
<span id="cb2-87">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model depth is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, but you provide `decoder_channels` for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> blocks."</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(</span>
<span id="cb2-88">                    n_blocks, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(decoder_channels)</span>
<span id="cb2-89">                )</span>
<span id="cb2-90">            )</span>
<span id="cb2-91"></span>
<span id="cb2-92">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove first skip with same spatial resolution</span></span>
<span id="cb2-93">        encoder_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_channels[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb2-94">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reverse channels to start from head of encoder</span></span>
<span id="cb2-95">        encoder_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_channels[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-96"></span>
<span id="cb2-97">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># computing blocks input and output channels</span></span>
<span id="cb2-98">        head_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_channels[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-99">        in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [head_channels] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(decoder_channels[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-100">        skip_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(encoder_channels[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-101">        out_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoder_channels</span>
<span id="cb2-102"></span>
<span id="cb2-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> center:</span>
<span id="cb2-104">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CenterBlock(head_channels, head_channels, use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>use_batchnorm)</span>
<span id="cb2-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-106">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Identity()</span>
<span id="cb2-107"></span>
<span id="cb2-108">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># combine decoder keyword arguments</span></span>
<span id="cb2-109">        kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>use_batchnorm, attention_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attention_type)</span>
<span id="cb2-110">        blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-111">            DecoderBlock(in_ch, skip_ch, out_ch, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb2-112">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> in_ch, skip_ch, out_ch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(in_channels, skip_channels, out_channels)</span>
<span id="cb2-113">        ]</span>
<span id="cb2-114">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ModuleList(blocks)</span>
<span id="cb2-115"></span>
<span id="cb2-116">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>features):</span>
<span id="cb2-117"></span>
<span id="cb2-118">        features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove first skip with same spatial resolution</span></span>
<span id="cb2-119">        features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reverse channels to start from head of encoder</span></span>
<span id="cb2-120"></span>
<span id="cb2-121">        head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-122">        skips <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb2-123"></span>
<span id="cb2-124">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.center(head)</span>
<span id="cb2-125"></span>
<span id="cb2-126">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, decoder_block <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.blocks):</span>
<span id="cb2-128">            skip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> skips[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(skips) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-129">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoder_block(x, skip)</span>
<span id="cb2-130">            out.append(x)</span>
<span id="cb2-131"></span>
<span id="cb2-132">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> out[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-133">    </span>
<span id="cb2-134"></span>
<span id="cb2-135"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SegmentationModel(nn.Module):</span>
<span id="cb2-136">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb2-137">                encoder,</span>
<span id="cb2-138">                encoder_weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-139">                encoder_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb2-140">                in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb2-141">                decoder_use_batchnorm: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb2-142">                decoder_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb2-143">                decoder_attention_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-144">                classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-145">                 ):</span>
<span id="cb2-146">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-147"></span>
<span id="cb2-148">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_encoder(</span>
<span id="cb2-149">            encoder,</span>
<span id="cb2-150">            in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>in_channels,</span>
<span id="cb2-151">            depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoder_depth,</span>
<span id="cb2-152">            weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoder_weights,</span>
<span id="cb2-153">        )</span>
<span id="cb2-154"></span>
<span id="cb2-155">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UnetDecoder(</span>
<span id="cb2-156">            encoder_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.out_channels,</span>
<span id="cb2-157">            decoder_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>decoder_channels,</span>
<span id="cb2-158">            n_blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoder_depth,</span>
<span id="cb2-159">            use_batchnorm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>decoder_use_batchnorm,</span>
<span id="cb2-160">            center<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb2-161">            attention_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>decoder_attention_type,</span>
<span id="cb2-162">        )</span>
<span id="cb2-163"></span>
<span id="cb2-164">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.segmentation_head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ModuleList()</span>
<span id="cb2-165">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> decoder_channels[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb2-166">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.segmentation_head.append(</span>
<span id="cb2-167">                SegmentationHead(</span>
<span id="cb2-168">                    in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>channel,</span>
<span id="cb2-169">                    out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>classes,</span>
<span id="cb2-170">                    activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-171">                    kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb2-172">                )</span>
<span id="cb2-173">            )</span>
<span id="cb2-174"></span>
<span id="cb2-175">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,x):</span>
<span id="cb2-176"></span>
<span id="cb2-177">        features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x)</span>
<span id="cb2-178">        decoder_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>features)</span>
<span id="cb2-179">        </span>
<span id="cb2-180">        masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-181">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,seg_head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.segmentation_head):</span>
<span id="cb2-182">            masks.append(seg_head(decoder_output[i]))</span>
<span id="cb2-183"></span>
<span id="cb2-184">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> masks</span>
<span id="cb2-185"></span>
<span id="cb2-186"></span>
<span id="cb2-187"></span>
<span id="cb2-188"></span>
<span id="cb2-189">in_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span>))</span>
<span id="cb2-190"></span>
<span id="cb2-191">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SegmentationModel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resnet18"</span>)</span>
<span id="cb2-192">model.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb2-193"></span>
<span id="cb2-194"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The following are the expected outputs"</span>)</span>
<span id="cb2-195"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model(in_.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)):</span>
<span id="cb2-196">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The following are the expected outputs
torch.Size([1, 1, 384, 384])
torch.Size([1, 1, 192, 192])
torch.Size([1, 1, 96, 96])
torch.Size([1, 1, 48, 48])
torch.Size([1, 1, 24, 24])</code></pre>
</div>
</div>
</section>
</section>
<section id="this-is-my-custom-loss-function-that-takes-output-from-all-decoder-block-and-interpolates-the-ground-truthlabelstargets-and-calculates-the-loss." class="level2">
<h2 class="anchored" data-anchor-id="this-is-my-custom-loss-function-that-takes-output-from-all-decoder-block-and-interpolates-the-ground-truthlabelstargets-and-calculates-the-loss.">This is My Custom Loss Function that takes output from all Decoder block and interpolates the Ground Truth(Labels/Targets) and calculates the loss.</h2>
<section id="the-w-weight-is-actually-12index-of-input-according-to-which-more-importance-is-given-to-the-main-prediction-and-smaller-and-smaller-weight-is-given-to-deeper-decoder-outputs." class="level3">
<h3 class="anchored" data-anchor-id="the-w-weight-is-actually-12index-of-input-according-to-which-more-importance-is-given-to-the-main-prediction-and-smaller-and-smaller-weight-is-given-to-deeper-decoder-outputs.">The “w” weight is actually 1/2^(index of input) according to which more importance is given to the Main Prediction and smaller and smaller weight is given to deeper Decoder outputs.</h3>
<div id="cell-6" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-03-31T15:21:33.336639Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-03-31T15:21:33.336039Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-03-31T15:21:33.343880Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-03-31T15:21:33.342574Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-03-31T15:21:33.336601Z&quot;}" data-trusted="true" data-execution_count="12">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Deep_Supervised_Loss(nn.Module):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-3"></span>
<span id="cb4-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smp.losses.TverskyLoss(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binary"</span>,from_logits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,)</span>
<span id="cb4-6"></span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, target):</span>
<span id="cb4-8">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(type(input))</span></span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb4-11">            w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> i)</span>
<span id="cb4-12">            </span>
<span id="cb4-13">            label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.interpolate(target,size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>img.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:])</span>
<span id="cb4-14"></span>
<span id="cb4-15">            l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss(torch.sigmoid(img), label)</span>
<span id="cb4-16">            </span>
<span id="cb4-17">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w</span>
<span id="cb4-18">            </span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> loss     </span></code></pre></div>
</div>
</section>
</section>
<section id="good-news-is-all-smps-and-timms-pretrained-weight-work-here" class="level2">
<h2 class="anchored" data-anchor-id="good-news-is-all-smps-and-timms-pretrained-weight-work-here">Good News is all SMP’s and timm’s Pretrained weight work here</h2>
<div id="cell-8" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-03-31T16:13:21.469987Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-03-31T16:13:21.469281Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-03-31T16:13:21.475259Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-03-31T16:13:21.473991Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-03-31T16:13:21.469950Z&quot;}" data-trusted="true" data-execution_count="26">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ENCODER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resnet18"</span></span>
<span id="cb5-2">ENCODER_WEIGHTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imagenet"</span></span></code></pre></div>
</div>
<section id="only-thing-we-need-to-take-care-is-we-must-get-segmetation-model-class-instead-of-smp.unet-of-library-to-use-deep-supervision" class="level3">
<h3 class="anchored" data-anchor-id="only-thing-we-need-to-take-care-is-we-must-get-segmetation-model-class-instead-of-smp.unet-of-library-to-use-deep-supervision">Only thing we need to take care is we must get Segmetation Model Class instead of smp.unet of library to use Deep Supervision</h3>
<div id="cell-10" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-03-31T16:13:22.819280Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-03-31T16:13:22.818910Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-03-31T16:13:23.108998Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-03-31T16:13:23.107994Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-03-31T16:13:22.819248Z&quot;}" data-trusted="true" data-execution_count="27">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SegmentationModel(encoder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ENCODER,encoder_weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ENCODER_WEIGHTS)</span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-03-31T15:22:33.365630Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-03-31T15:22:33.365120Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-03-31T15:22:33.373001Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-03-31T15:22:33.371935Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-03-31T15:22:33.365582Z&quot;}" data-trusted="true" data-execution_count="17">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">train_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb7-2">train_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span></code></pre></div>
</div>
<div id="cell-12" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-03-31T15:50:37.553846Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-03-31T15:50:37.553456Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-03-31T15:50:37.578941Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-03-31T15:50:37.578003Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-03-31T15:50:37.553814Z&quot;}" data-trusted="true" data-execution_count="20">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">model.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>)</span>
<span id="cb8-2">prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(train_image)</span></code></pre></div>
</div>
</section>
</section>
<section id="output-is-a-list-whose-length-is-same-as-encoder-length-0th-index-is-the-main-index-of-prediction" class="level2">
<h2 class="anchored" data-anchor-id="output-is-a-list-whose-length-is-same-as-encoder-length-0th-index-is-the-main-index-of-prediction">Output is a List whose length is same as Encoder length 0’th index is the main Index of Prediction</h2>
<div id="cell-14" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-03-31T16:15:46.883453Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-03-31T16:15:46.883097Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-03-31T16:15:46.889755Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-03-31T16:15:46.888692Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-03-31T16:15:46.883421Z&quot;}" data-trusted="true" data-execution_count="28">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"look at the shape of Predictions"</span>)</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> out <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prediction:</span>
<span id="cb9-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>look at the shape of Predictions
torch.Size([36, 1, 256, 256])
torch.Size([36, 1, 128, 128])
torch.Size([36, 1, 64, 64])
torch.Size([36, 1, 32, 32])
torch.Size([36, 1, 16, 16])</code></pre>
</div>
</div>
</section>
<section id="implementation-output-of-loss-function" class="level2">
<h2 class="anchored" data-anchor-id="implementation-output-of-loss-function">Implementation output of Loss Function</h2>
<div id="cell-16" class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-03-31T16:15:50.190098Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-03-31T16:15:50.189561Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-03-31T16:15:50.203699Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-03-31T16:15:50.202742Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-03-31T16:15:50.190054Z&quot;}" data-trusted="true" data-execution_count="29">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Deep_Supervised_Loss()(prediction,train_labels)</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss.item())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.6200616359710693</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Medical AI</category>
  <category>segmentation</category>
  <category>PyTorch</category>
  <guid>https://bibhabasumohapatra.github.io/posts/deep-supervised-in-segmentation-models-pytorch.html</guid>
  <pubDate>Thu, 30 Mar 2023 18:30:00 GMT</pubDate>
</item>
</channel>
</rss>
